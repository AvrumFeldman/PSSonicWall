function Connect-SWAppliance {
    [CmdletBinding()]
    param (
        # SonicWall Appliance IP or FQDN
        [Parameter(Mandatory=$true)]
        [string]$ApplianceAddress,

        # Credential object to connect to SonicWall Appliance
        [Parameter(Mandatory=$true)]
        [System.Management.Automation.PSCredential]$Credential,

        # Port to connect to the appliance
        [int32]$Port,

        # Connect using HTTP
        [boolean]$Insecure=$false
    )

    begin {
        # Declaring resource of the function
        $Resource = 'auth'

        # Declaring used rest method
        $Method = 'post'
    }

    process {
        ### Building the URL
        # Generate the protocol
        if (!$Insecure){
            $Protocol = 'https'

            # Disable Ssl verification to bypass autogenerated certicate
            Disable-SslVerification

            # Force the use of TLS1.2
            [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
        }
        else {
            $Protocol = 'http'
        }

        # Add custom port to address if necessary
        if (!$Port) {
            $Address = $ApplianceAddress
        }
        else {
            $Address = "$($ApplianceAddress):$($Port)"
        }

        # Base URL for API calls
        $BaseApiUrl = '/api/sonicos/'
        $SWBaseUrl = "$($Protocol)://$($Address)$($BaseApiUrl)"

        # Generate the credential pair
        $CredPair =  "$($Credential.UserName):$($Credential.GetNetworkCredential().Password)"
        $EncodedCredPair = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($CredPair))

        # Remove variable with plain text password
        Remove-Variable -Name CredPair

        # Generate headers for the request
        $Headers = @{
            Authorization = "Basic $EncodedCredPair"
        }

        # Connect to the appliance
        Try {
            Write-Verbose "Trying to authenticate to $SWBaseUrl."
            Invoke-RestMethod -Uri "$($SWBaseUrl)$($Resource)" -Headers $Headers -Method $Method | Out-Null
            # Set an environmental variable with the base URL of the connection to reuse in the rest of the PSSonicWall functions
            $env:SWConnection = $SWBaseUrl
        }
        Catch {
            Throw $_
        }
    }
}